import React, { useState } from "react";
import { trackButtonClick } from "../analytics.js";

function AIChat({ setView }) {
  const [messages, setMessages] = useState([
    { text: "Hello! I'm your disaster preparedness assistant. How can I help you today?", sender: "ai" }
  ]);
  const [input, setInput] = useState("");
  const [suggestions, setSuggestions] = useState([]);
  const [selectedIndex, setSelectedIndex] = useState(-1);
  const [language, setLanguage] = useState("en");

  const disasterOptions = ["earthquake", "flood", "fire", "hurricane", "tornado", "tsunami", "wildfire", "blizzard", "preparedness", "protection", "volcanic eruption", "landslide", "pandemic", "chemical spill", "drought", "heatwave"];

  const mockResponses = {
    "earthquake": {
      en: " During an earthquake: DROP, COVER, and HOLD ON under a sturdy table or desk until shaking stops. Stay away from windows, outside doors, and walls. If outdoors, move to an open area away from buildings, trees, and power lines. Secure heavy furniture, prepare an emergency kit, and know your safe spots. Aftershocks can occur, so stay alert and follow local authorities for evacuation if needed. Stay safe! ЁЯЫбя╕П",
      hi: " рднреВрдХрдВрдк рдХреЗ рджреМрд░рд╛рди: рдПрдХ рдордЬрдмреВрдд рдЯреЗрдмрд▓ рдпрд╛ рдбреЗрд╕реНрдХ рдХреЗ рдиреАрдЪреЗ рдЧрд┐рд░реЗрдВ, рдХрд╡рд░ рдХрд░реЗрдВ рдФрд░ рдкрдХрдбрд╝реЗрдВ рдЬрдм рддрдХ рд╣рд┐рд▓рдирд╛ рдмрдВрдж рди рд╣реЛред рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ, рдмрд╛рд╣рд░ рдХреЗ рджрд░рд╡рд╛рдЬреЛрдВ рдФрд░ рджреАрд╡рд╛рд░реЛрдВ рд╕реЗ рджреВрд░ рд░рд╣реЗрдВред рдпрджрд┐ рдмрд╛рд╣рд░ рд╣реИрдВ, рддреЛ рдЗрдорд╛рд░рддреЛрдВ, рдкреЗрдбрд╝реЛрдВ рдФрд░ рдмрд┐рдЬрд▓реА рд▓рд╛рдЗрдиреЛрдВ рд╕реЗ рджреВрд░ рдЦреБрд▓реЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдЬрд╛рдПрдВред рднрд╛рд░реА рдлрд░реНрдиреАрдЪрд░ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ, рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрд┐рдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВ, рдФрд░ рдЕрдкрдиреЗ рд╕реБрд░рдХреНрд╖рд┐рдд рд╕реНрдерд╛рдиреЛрдВ рдХреЛ рдЬрд╛рдиреЗрдВред рдмрд╛рдж рдХреЗ рдЭрдЯрдХреЗ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ, рдЗрд╕рд▓рд┐рдП рд╕рддрд░реНрдХ рд░рд╣реЗрдВ рдФрд░ рдирд┐рдХрд╛рд╕реА рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВред рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ! ЁЯЫбя╕П"
    },
    "flood": {
      en: " For floods: Move to higher ground immediately if flooding is imminent. Avoid walking or driving through floodwaters, as they can be deeper than they appear and carry debris. Listen to local authorities for evacuation instructions. Turn off utilities if instructed, and avoid contact with floodwater which may be contaminated. Have sandbags or barriers ready if possible. Don't underestimate the water's power! ЁЯТз",
      hi: " рдмрд╛рдврд╝ рдХреЗ рд▓рд┐рдП: рдпрджрд┐ рдмрд╛рдврд╝ рдЖ рд░рд╣реА рд╣реИ рддреЛ рддреБрд░рдВрдд рдЙрдЪреНрдЪ рдЬрдореАрди рдкрд░ рдЬрд╛рдПрдВред рдмрд╛рдврд╝ рдХреЗ рдкрд╛рдиреА рдореЗрдВ рдЪрд▓рдиреЗ рдпрд╛ рдбреНрд░рд╛рдЗрд╡ рдХрд░рдиреЗ рд╕реЗ рдмрдЪреЗрдВ, рдХреНрдпреЛрдВрдХрд┐ рдпрд╣ рджрд┐рдЦрдиреЗ рд╕реЗ рдЧрд╣рд░рд╛ рд╣реЛ рд╕рдХрддрд╛ рд╣реИ рдФрд░ рдорд▓рдмрд╛ рд▓реЗ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред рдирд┐рдХрд╛рд╕реА рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХреЗ рд▓рд┐рдП рд╕реНрдерд╛рдиреАрдп рдЕрдзрд┐рдХрд╛рд░рд┐рдпреЛрдВ рдХреЛ рд╕реБрдиреЗрдВред рдпрджрд┐ рдирд┐рд░реНрджреЗрд╢ рджрд┐рдпрд╛ рдЬрд╛рдП рддреЛ рдЙрдкрдпреЛрдЧрд┐рддрд╛рдУрдВ рдХреЛ рдмрдВрдж рдХрд░реЗрдВ, рдФрд░ рджреВрд╖рд┐рдд рдмрд╛рдврд╝ рдХреЗ рдкрд╛рдиреА рд╕реЗ рд╕рдВрдкрд░реНрдХ рд╕реЗ рдмрдЪреЗрдВред рдпрджрд┐ рд╕рдВрднрд╡ рд╣реЛ рддреЛ рд░реЗрдд рдХреЗ рдмреИрдЧ рдпрд╛ рдмрд╛рдзрд╛рдПрдВ рддреИрдпрд╛рд░ рд░рдЦреЗрдВред рдкрд╛рдиреА рдХреА рд╢рдХреНрддрд┐ рдХреЛ рдХрдо рдордд рд╕рдордЭреЗрдВ! ЁЯТз"
    },
    "fire": {
      en: " In case of fire: Get out quickly and stay out. Call emergency services immediately. If trapped, seal doors and windows with wet cloths and signal for help from a window. Crawl low under smoke, and never go back inside for anything. Have working smoke alarms, fire extinguishers, and a family escape plan ready. Practice fire drills regularly. Fire safety first! ЁЯЪТ",
      hi: " рдЖрдЧ рдХреА рд╕реНрдерд┐рддрд┐ рдореЗрдВ: рдЬрд▓реНрджреА рдмрд╛рд╣рд░ рдирд┐рдХрд▓реЗрдВ рдФрд░ рдмрд╛рд╣рд░ рд░рд╣реЗрдВред рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВред рдпрджрд┐ рдлрдВрд╕реЗ рд╣реБрдП рд╣реИрдВ, рддреЛ рджрд░рд╡рд╛рдЬреЛрдВ рдФрд░ рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рдХреЛ рдЧреАрд▓реЗ рдХрдкрдбрд╝реЛрдВ рд╕реЗ рд╕реАрд▓ рдХрд░реЗрдВ рдФрд░ рдЦрд┐рдбрд╝рдХреА рд╕реЗ рдорджрдж рдХреЗ рд▓рд┐рдП рд╕рдВрдХреЗрдд рдХрд░реЗрдВред рдзреБрдПрдВ рдХреЗ рдиреАрдЪреЗ рдиреАрдЪреЗ рд░реЗрдВрдЧреЗрдВ, рдФрд░ рдХрднреА рднреА рдЕрдВрджрд░ рд╡рд╛рдкрд╕ рди рдЬрд╛рдПрдВред рдХрд╛рдо рдХрд░рдиреЗ рд╡рд╛рд▓реЗ рдзреБрдПрдВ рдХреА рдЕрд▓рд╛рд░реНрдо, рдЕрдЧреНрдирд┐рд╢рд╛рдордХ рдФрд░ рдкрд░рд┐рд╡рд╛рд░ рдХреА рдирд┐рдХрд╛рд╕реА рдпреЛрдЬрдирд╛ рддреИрдпрд╛рд░ рд░рдЦреЗрдВред рдЖрдЧ рдХреА рдбреНрд░рд┐рд▓ рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдЕрднреНрдпрд╛рд╕ рдХрд░реЗрдВред рдЖрдЧ рдХреА рд╕реБрд░рдХреНрд╖рд╛ рдкрд╣рд▓реЗ! ЁЯЪТ"
    },
    "hurricane": {
      en: " Prepare for hurricanes by securing your home with shutters or plywood, having emergency supplies for at least 72 hours, and following evacuation orders promptly. Stay tuned to weather updates via radio or battery-powered devices. Avoid windows during high winds, and be prepared for power outages and flooding. Stock up on batteries, generators, and non-perishable food. Batten down the hatches! ЁЯМкя╕П",
      hi: " рд╣рд░реАрдХреИрди рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рдХрд░реЗрдВ: рд╢рдЯрд░ рдпрд╛ рдкреНрд▓рд╛рдИрд╡реБрдб рд╕реЗ рдЕрдкрдиреЗ рдШрд░ рдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрд░реЗрдВ, рдХрдо рд╕реЗ рдХрдо 72 рдШрдВрдЯреЛрдВ рдХреЗ рд▓рд┐рдП рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдЖрдкреВрд░реНрддрд┐ рд░рдЦреЗрдВ, рдФрд░ рдирд┐рдХрд╛рд╕реА рдЖрджреЗрд╢реЛрдВ рдХрд╛ рддреБрд░рдВрдд рдкрд╛рд▓рди рдХрд░реЗрдВред рд░реЗрдбрд┐рдпреЛ рдпрд╛ рдмреИрдЯрд░реА рд╕реЗ рдЪрд▓рдиреЗ рд╡рд╛рд▓реЗ рдЙрдкрдХрд░рдгреЛрдВ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдореМрд╕рдо рдЕрдкрдбреЗрдЯ рдкрд░ рдмрдиреЗ рд░рд╣реЗрдВред рдЙрдЪреНрдЪ рд╣рд╡рд╛рдУрдВ рдХреЗ рджреМрд░рд╛рди рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рд╕реЗ рдмрдЪреЗрдВ, рдФрд░ рдмрд┐рдЬрд▓реА рдХреА рдХрдЯреМрддреА рдФрд░ рдмрд╛рдврд╝ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд░рд╣реЗрдВред рдмреИрдЯрд░реА, рдЬрдирд░реЗрдЯрд░ рдФрд░ рдЧреИрд░-рдирд╖реНрдЯ рд╣реЛрдиреЗ рд╡рд╛рд▓реЗ рднреЛрдЬрди рдкрд░ рд╕реНрдЯреЙрдХ рдХрд░реЗрдВред рд╣реИрдЪ рдХреЛ рдмрдВрдж рдХрд░реЗрдВ! ЁЯМкя╕П"
    },
    "tornado": {
      en: " Tornado safety: Go to an interior room on the lowest floor, away from windows. Avoid auditoriums or large open spaces. Use blankets or helmets for protection if no shelter is available. Listen for tornado warnings and sirens. If in a vehicle, abandon it for a sturdy building or lie flat in a ditch. Have a tornado shelter or safe room designated. Take cover immediately! ЁЯПа",
      hi: " рдЯреЙрд░реНрдирд╛рдбреЛ рд╕реБрд░рдХреНрд╖рд╛: рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рд╕реЗ рджреВрд░ рд╕рдмрд╕реЗ рдиреАрдЪреЗ рдХреЗ рдлрд░реНрд╢ рдкрд░ рдПрдХ рдЖрдВрддрд░рд┐рдХ рдХрдорд░реЗ рдореЗрдВ рдЬрд╛рдПрдВред рдСрдбрд┐рдЯреЛрд░рд┐рдпрдо рдпрд╛ рдмрдбрд╝реЗ рдЦреБрд▓реЗ рд╕реНрдерд╛рдиреЛрдВ рд╕реЗ рдмрдЪреЗрдВред рдпрджрд┐ рдХреЛрдИ рдЖрд╢реНрд░рдп рдЙрдкрд▓рдмреНрдз рди рд╣реЛ рддреЛ рд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдХрдВрдмрд▓ рдпрд╛ рд╣реЗрд▓рдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред рдЯреЙрд░реНрдирд╛рдбреЛ рдЪреЗрддрд╛рд╡рдирд┐рдпреЛрдВ рдФрд░ рд╕рд╛рдпрд░рди рдХреЛ рд╕реБрдиреЗрдВред рдпрджрд┐ рд╡рд╛рд╣рди рдореЗрдВ рд╣реИрдВ, рддреЛ рдЗрд╕реЗ рдордЬрдмреВрдд рдЗрдорд╛рд░рдд рдХреЗ рд▓рд┐рдП рдЫреЛрдбрд╝ рджреЗрдВ рдпрд╛ рдЦрд╛рдИ рдореЗрдВ рд▓реЗрдЯ рдЬрд╛рдПрдВред рдЯреЙрд░реНрдирд╛рдбреЛ рдЖрд╢реНрд░рдп рдпрд╛ рд╕реБрд░рдХреНрд╖рд┐рдд рдХрдорд░рд╛ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реЗрдВред рддреБрд░рдВрдд рдХрд╡рд░ рд▓реЗрдВ! ЁЯПа"
    },
    "tsunami": {
      en: " Tsunami warning: Move to higher ground immediately. Avoid the beach and low-lying coastal areas. Follow evacuation routes and listen to emergency broadcasts. Do not return until authorities declare it safe. Prepare an emergency kit and stay informed. Stay alert for multiple waves. Safety first! ЁЯМК",
      hi: " рд╕реБрдирд╛рдореА рдЪреЗрддрд╛рд╡рдиреА: рддреБрд░рдВрдд рдЙрдЪреНрдЪ рдЬрдореАрди рдкрд░ рдЬрд╛рдПрдВред рд╕рдореБрджреНрд░ рддрдЯ рдФрд░ рдирд┐рдореНрди-рднреВрдорд┐ рддрдЯреАрдп рдХреНрд╖реЗрддреНрд░реЛрдВ рд╕реЗ рдмрдЪреЗрдВред рдирд┐рдХрд╛рд╕реА рдорд╛рд░реНрдЧреЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВ рдФрд░ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдкреНрд░рд╕рд╛рд░рдг рд╕реБрдиреЗрдВред рдЬрдм рддрдХ рдЕрдзрд┐рдХрд╛рд░реА рд╕реБрд░рдХреНрд╖рд┐рдд рдШреЛрд╖рд┐рдд рди рдХрд░реЗрдВ, рддрдм рддрдХ рд╡рд╛рдкрд╕ рди рд▓реМрдЯреЗрдВред рдПрдХ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрд┐рдЯ рддреИрдпрд╛рд░ рдХрд░реЗрдВ рдФрд░ рд╕реВрдЪрд┐рдд рд░рд╣реЗрдВред рдХрдИ рд▓рд╣рд░реЛрдВ рдХреЗ рд▓рд┐рдП рд╕рддрд░реНрдХ рд░рд╣реЗрдВред рд╕реБрд░рдХреНрд╖рд╛ рдкрд╣рд▓реЗ! ЁЯМК"
    },
    "wildfire": {
      en: " Wildfire safety: Create defensible space around your home by clearing flammable vegetation. Have an evacuation plan and emergency kit ready. Stay informed about fire conditions and alerts. If advised to evacuate, do so immediately. Wear protective clothing and avoid breathing smoke. Follow local fire department instructions. Stay safe! ЁЯФе",
      hi: " рд╡рдирд╛рдЧреНрдирд┐ рд╕реБрд░рдХреНрд╖рд╛: рдЕрдкрдиреЗ рдШрд░ рдХреЗ рдЖрд╕рдкрд╛рд╕ рдЬреНрд╡рд▓рдирд╢реАрд▓ рд╡рдирд╕реНрдкрддрд┐ рдХреЛ рд╕рд╛рдл рдХрд░рдХреЗ рд░рдХреНрд╖рд╛ рдХреНрд╖реЗрддреНрд░ рдмрдирд╛рдПрдВред рдПрдХ рдирд┐рдХрд╛рд╕реА рдпреЛрдЬрдирд╛ рдФрд░ рдЖрдкрд╛рддрдХрд╛рд▓реАрди рдХрд┐рдЯ рддреИрдпрд╛рд░ рд░рдЦреЗрдВред рдЖрдЧ рдХреА рд╕реНрдерд┐рддрд┐ рдФрд░ рдЕрд▓рд░реНрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕реВрдЪрд┐рдд рд░рд╣реЗрдВред рдпрджрд┐ рдирд┐рдХрд╛рд╕реА рдХреА рд╕рд▓рд╛рд╣ рджреА рдЬрд╛рдП, рддреЛ рддреБрд░рдВрдд рдХрд░реЗрдВред рд╕реБрд░рдХреНрд╖рд╛рддреНрдордХ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ рдФрд░ рдзреБрдЖрдВ рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рд╕реЗ рдмрдЪреЗрдВред рд╕реНрдерд╛рдиреАрдп рдЕрдЧреНрдирд┐рд╢рдорди рд╡рд┐рднрд╛рдЧ рдХреЗ рдирд┐рд░реНрджреЗрд╢реЛрдВ рдХрд╛ рдкрд╛рд▓рди рдХрд░реЗрдВред рд╕реБрд░рдХреНрд╖рд┐рдд рд░рд╣реЗрдВ! ЁЯФе"
    },
    "default": {
      en: "I'm here to help with disaster preparedness. Please ask me about any specific disaster or safety topic.",
      hi: "рдореИрдВ рдЖрдкрджрд╛ рддреИрдпрд╛рд░реА рдореЗрдВ рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдВ рд╣реВрдВред рдХреГрдкрдпрд╛ рдореБрдЭрд╕реЗ рдХрд┐рд╕реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЖрдкрджрд╛ рдпрд╛ рд╕реБрд░рдХреНрд╖рд╛ рд╡рд┐рд╖рдп рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред"
    }
  };

  const handleSend = (messageText) => {
    if (!messageText?.trim()) return;

    const userMessage = { text: messageText, sender: "user" };
    setMessages(prev => [...prev, userMessage]);
    trackButtonClick('AI Chat Send Message');

    // Generate mock response
    const lowerInput = messageText.toLowerCase();
    let response = mockResponses.default[language];
    for (const key in mockResponses) {
      if (lowerInput.includes(key)) {
        response = mockResponses[key][language];
        break;
      }
    }

    const aiMessage = { text: response, sender: "ai" };
    setTimeout(() => {
      setMessages(prev => [...prev, aiMessage]);
    }, 1000); // Simulate delay

    setInput("");
    setSuggestions([]);
    setSelectedIndex(-1);
  };

  const handleInputChange = (e) => {
    const value = e.target.value;
    setInput(value);
    setSelectedIndex(-1);

    if (value.trim()) {
      const filtered = disasterOptions.filter(option =>
        option.toLowerCase().includes(value.toLowerCase())
      );
      setSuggestions(filtered);
    } else {
      setSuggestions([]);
    }
  };

  const handleKeyPress = (e) => {
    if (suggestions.length > 0) {
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        setSelectedIndex(prev => (prev + 1) % suggestions.length);
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        setSelectedIndex(prev => prev > 0 ? prev - 1 : suggestions.length - 1);
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        e.preventDefault();
        setInput(suggestions[selectedIndex]);
        setSuggestions([]);
        setSelectedIndex(-1);
      } else if (e.key === 'Escape') {
        setSuggestions([]);
        setSelectedIndex(-1);
      } else if (e.key === 'Enter') {
        handleSend();
      }
    } else if (e.key === 'Enter') {
      handleSend();
    }
  };

  const handleSuggestionClick = (suggestion) => {
    setInput(suggestion);
    setSuggestions([]);
    setSelectedIndex(-1);
  };

  return (
    <div style={{
      minHeight: '80vh',
      backgroundColor: '#f5f5f5',
      padding: '40px 20px',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center'
    }}>
      <div style={{
        backgroundColor: 'white',
        borderRadius: '15px',
        boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
        padding: '30px',
        maxWidth: '600px',
        width: '100%',
        maxHeight: '70vh',
        display: 'flex',
        flexDirection: 'column'
      }}>
        <h2 style={{
          color: '#333',
          textAlign: 'center',
          marginBottom: '20px',
          fontSize: '28px'
        }}>
          Disaster AI Assistant
        </h2>
        <div style={{
          flex: 1,
          overflowY: 'auto',
          marginBottom: '20px',
          padding: '10px',
          border: '1px solid #ddd',
          borderRadius: '8px',
          backgroundColor: '#f9f9f9'
        }}>
          {messages.map((msg, index) => (
            <div key={index} style={{
              marginBottom: '10px',
              textAlign: msg.sender === 'user' ? 'right' : 'left'
            }}>
              <div style={{
                display: 'inline-block',
                padding: '10px 15px',
                borderRadius: '15px',
                backgroundColor: msg.sender === 'user' ? '#667eea' : '#e9ecef',
                color: msg.sender === 'user' ? 'white' : '#333',
                maxWidth: '70%'
              }}>
                {msg.text}
              </div>
            </div>
          ))}
          </div>
          <div style={{
            display: 'flex',
            flexDirection: 'column',
            gap: '10px'
          }}>
            <div style={{
              display: 'flex',
              flexWrap: 'wrap',
              gap: '8px',
              justifyContent: 'center',
              marginBottom: '10px'
            }}>
              {disasterOptions.map((option) => (
                <button
                  key={option}
                  onClick={() => handleSend(option)}
                  style={{
                    backgroundColor: '#28a745',
                    color: 'white',
                    border: 'none',
                    borderRadius: '8px',
                    padding: '8px 12px',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    cursor: 'pointer',
                    textTransform: 'capitalize'
                  }}
                >
                  {option}
                </button>
              ))}
            </div>
            <div style={{ display: 'flex', gap: '10px' }}>
              <div style={{ position: 'relative', flex: 1 }}>
                <input
                  type="text"
                  value={input}
                  onChange={handleInputChange}
                  onKeyDown={handleKeyPress}
                  placeholder="Ask me about disaster preparedness..."
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '2px solid #ddd',
                    borderRadius: '8px',
                    fontSize: '16px'
                  }}
                />
                {suggestions.length > 0 && (
                  <div style={{
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    backgroundColor: 'white',
                    border: '1px solid #ddd',
                    borderRadius: '8px',
                    boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
                    maxHeight: '200px',
                    overflowY: 'auto',
                    zIndex: 10
                  }}>
                    {suggestions.map((suggestion, index) => (
                      <div
                        key={suggestion}
                        onClick={() => handleSuggestionClick(suggestion)}
                        style={{
                          padding: '10px',
                          cursor: 'pointer',
                          backgroundColor: index === selectedIndex ? '#f0f0f0' : 'white',
                          borderBottom: index < suggestions.length - 1 ? '1px solid #eee' : 'none',
                          textTransform: 'capitalize'
                        }}
                      >
                        {suggestion}
                      </div>
                    ))}
                  </div>
                )}
              </div>
              <button
                onClick={() => handleSend(input)}
                style={{
                  backgroundColor: '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '8px',
                  padding: '12px 20px',
                  fontSize: '16px',
                  fontWeight: 'bold',
                  cursor: 'pointer'
                }}
              >
                Send
              </button>
            </div>
          </div>
      </div>
    </div>
  );
}

export default AIChat;
